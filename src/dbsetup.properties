# To change this license header, choose License Headers in Project Properties.
# To change this template file, choose Tools | Templates
# and open the template in the editor.
#select db
db.create=CREATE DATABASE IF NOT EXISTS {0}
db.use = use {0}

#create tables
db.table.product_categories = CREATE TABLE IF NOT EXISTS `product_categories` (`id` int(11) NOT NULL AUTO_INCREMENT, `title` varchar(200) NOT NULL, `created_on` int(11) unsigned DEFAULT 0, `modified_on` int(11) unsigned DEFAULT 0, PRIMARY KEY  (`id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.product_types = CREATE TABLE IF NOT EXISTS `product_types` (`id` int(11) NOT NULL AUTO_INCREMENT, `title` varchar(200) NOT NULL, `created_on` int(11) unsigned DEFAULT 0, `modified_on` int(11) unsigned DEFAULT 0, PRIMARY KEY  (`id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.uoms = CREATE TABLE IF NOT EXISTS `uoms` (`id` int(11) NOT NULL AUTO_INCREMENT, `title` varchar(200) NOT NULL, `created_on` int(11) unsigned DEFAULT 0, `modified_on` int(11) unsigned DEFAULT 0, PRIMARY KEY  (`id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.products = CREATE TABLE IF NOT EXISTS `products` (`id` int(11) NOT NULL AUTO_INCREMENT, `category_id` int(11) DEFAULT NULL, `type_id` int(11) DEFAULT NULL, `standard_uom_id` int(11) DEFAULT NULL, `sale_uom_id` int(11) DEFAULT NULL, `purchase_uom_id` int(11) DEFAULT NULL, `name` varchar(200) NOT NULL, `code` varchar(200)  DEFAULT '', `length` varchar(200) DEFAULT '', `width` varchar(200) DEFAULT '', `height` varchar(200) DEFAULT '', `weight` varchar(200) DEFAULT '', `unit_price` double DEFAULT 0, `created_on` int(11) unsigned DEFAULT 0, `modified_on` int(11) unsigned DEFAULT 0, PRIMARY KEY  (`id`), KEY `fk_products_categories1_idx` (`category_id`), KEY `fk_products_types1_idx` (`type_id`), KEY `fk_products_uoms1_idx` (`standard_uom_id`), KEY `fk_products_uoms2_idx` (`sale_uom_id`), KEY `fk_products_uoms3_idx` (`purchase_uom_id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
#db.table.products = CREATE TABLE IF NOT EXISTS `products` (`id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(200) NOT NULL, `code` varchar(200)  DEFAULT '', `length` varchar(200) DEFAULT '', `width` varchar(200) DEFAULT '', `height` varchar(200) DEFAULT '', `weight` varchar(200) DEFAULT '', `created_on` int(11) unsigned DEFAULT 0, `modified_on` int(11) unsigned DEFAULT 0, PRIMARY KEY  (`id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.groups = CREATE TABLE IF NOT EXISTS `groups` (`id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(20) NOT NULL, `description` varchar(100) NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;
db.table.users = CREATE TABLE IF NOT EXISTS `users` (`id` int(11) NOT NULL AUTO_INCREMENT, `first_name` varchar(50) DEFAULT '', `last_name` varchar(50) DEFAULT '', `email` varchar(100) NOT NULL, `phone` varchar(20) DEFAULT '', `fax` varchar(50) DEFAULT '', `website` varchar(500) DEFAULT '', `created_on` int(11) unsigned DEFAULT 0, `modified_on` int(11) unsigned DEFAULT 0, PRIMARY KEY (`id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.users_groups = CREATE TABLE IF NOT EXISTS `users_groups` (`id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `group_id` int(11) NOT NULL, PRIMARY KEY (`id`), UNIQUE KEY `uc_users_groups` (`user_id`,`group_id`), KEY `fk_users_groups_users1_idx` (`user_id`), KEY `fk_users_groups_groups1_idx` (`group_id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.address_types = CREATE TABLE IF NOT EXISTS `address_types` (`id` int(11) NOT NULL AUTO_INCREMENT, `title` varchar(200) NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1; 
db.table.address_categories = CREATE TABLE IF NOT EXISTS `address_categories` (`id` int(11) NOT NULL AUTO_INCREMENT, `title` varchar(200) NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1; 
db.table.users_addressess = CREATE TABLE IF NOT EXISTS `users_addressess` (`id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `address_type_id` int(11) NOT NULL, `address_category_id` int(11) NOT NULL, `address` varchar(500) NOT NULL, `city` varchar(500) NOT NULL, `state` varchar(500) NOT NULL, `zip` varchar(500) NOT NULL, PRIMARY KEY (`id`), KEY `fk_users_addressess_users1_idx` (`user_id`), KEY `fk_users_addressess_address_types1_idx` (`address_type_id`), KEY `fk_users_addressess_address_categories1_idx` (`address_category_id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.suppliers = CREATE TABLE IF NOT EXISTS `suppliers` (`id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `remarks` varchar(1000) DEFAULT NULL, PRIMARY KEY (`id`), KEY `fk_suppliers_users1_idx` (`user_id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.customers = CREATE TABLE IF NOT EXISTS `customers` (`id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, PRIMARY KEY (`id`), KEY `fk_customers_users1_idx` (`user_id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.purchase_order_statuses = CREATE TABLE IF NOT EXISTS `purchase_order_statuses` (`id` int(11) NOT NULL AUTO_INCREMENT, `description` varchar(200), PRIMARY KEY  (`id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.purchase_orders = CREATE TABLE IF NOT EXISTS `purchase_orders` (`id` int(11) NOT NULL auto_increment, `order_no` varchar(200), `supplier_user_id` int(11) NOT NULL, `status_id` int NOT NULL, `order_date` int(11) unsigned NOT NULL, `requested_ship_date` int(11) unsigned NOT NULL, `discount` double default 0, `created_on` int(11) unsigned DEFAULT 0, `modified_on` int(11) unsigned DEFAULT 0, `remarks` varchar(500), PRIMARY KEY  (`id`), UNIQUE KEY (`order_no`), KEY `fk_po_pos1_idx` (`status_id`), KEY `fk_po_users1_idx` (`supplier_user_id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.po_warehouse_products = CREATE TABLE IF NOT EXISTS `po_warehouse_products` (`id` int(11) NOT NULL auto_increment, `product_id` int(11) NOT NULL, `order_no` varchar(200), `unit_price` double default 0, `discount` double default 0, `created_on` int(11) unsigned DEFAULT 0, `modified_on` int(11) unsigned DEFAULT 0, PRIMARY KEY  (`id`), KEY `fk_powp_purchase_orders1_idx` (`order_no`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.ws_transaction_categories = CREATE TABLE IF NOT EXISTS `ws_transaction_categories` (`id` int NOT NULL auto_increment, `description` varchar(200), PRIMARY KEY  (`id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.warehouse_stocks = CREATE TABLE IF NOT EXISTS `warehouse_stocks` (`id` int(11) NOT NULL auto_increment, `order_no` varchar(200) DEFAULT NULL, `product_id` int(11) NOT NULL, `stock_in` double default 0, `stock_out` double default 0, `created_on` int(11) unsigned DEFAULT 0, `modified_on` int(11) unsigned DEFAULT 0, `transaction_category_id` int NOT NULL, PRIMARY KEY  (`id`), KEY `fk_wsi_purchase_orders1_idx` (`order_no`), KEY `fk_wsi_products1_idx` (`product_id`), KEY `fk_wsi_wstcat1_idx` (`transaction_category_id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.po_showroom_products = CREATE TABLE IF NOT EXISTS `po_showroom_products` (`id` int NOT NULL auto_increment, `product_id` int NOT NULL, `order_no` varchar(200), `unit_price` double default 0, `discount` double default 0, `created_on` int(11) unsigned DEFAULT NULL, `modified_on` int(11) unsigned DEFAULT NULL, PRIMARY KEY  (`id`), KEY `fk_po_showroom_products_purchase_orders1_idx` (`order_no`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.sale_order_statuses = CREATE TABLE IF NOT EXISTS `sale_order_statuses` (`id` int NOT NULL auto_increment, `description` varchar(200), PRIMARY KEY  (`id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.sale_orders = CREATE TABLE IF NOT EXISTS `sale_orders` (`id` int NOT NULL auto_increment, `order_no` varchar(200), `customer_user_id` int NOT NULL, `status_id` int NOT NULL, `sale_date` int(11) unsigned DEFAULT NULL, `discount` double default 0, `created_on` int(11) unsigned DEFAULT NULL, `modified_on` int(11) unsigned DEFAULT NULL, `remarks` varchar(500), PRIMARY KEY  (`id`), UNIQUE KEY (`order_no`), KEY `fk_so_sos1_idx` (`status_id`), KEY `fk_so_users1_idx` (`customer_user_id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.sale_order_products = CREATE TABLE IF NOT EXISTS `sale_order_products` (`id` int NOT NULL auto_increment, `product_id` int NOT NULL, `sale_order_no` varchar(200), `purchase_order_no` varchar(200), `unit_price` double default 0, `discount` double default 0, `created_on` int(11) unsigned DEFAULT NULL, `modified_on` int(11) unsigned DEFAULT NULL, PRIMARY KEY  (`id`), KEY `fk_sop_sale_orders1_idx` (`sale_order_no`), KEY `fk_sop_purchase_orders1_idx` (`purchase_order_no`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.ss_transaction_categories = CREATE TABLE IF NOT EXISTS `ss_transaction_categories` (`id` int NOT NULL auto_increment, `description` varchar(200), PRIMARY KEY  (`id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
db.table.showroom_stocks =   CREATE TABLE IF NOT EXISTS `showroom_stocks` (`id` int NOT NULL auto_increment, `purchase_order_no` varchar(200) DEFAULT NULL, `sale_order_no` varchar(200) DEFAULT NULL, `product_id` int NOT NULL, `stock_in` double default 0, `stock_out` double default 0, `created_on` int(11) unsigned DEFAULT 0, `modified_on` int(11) unsigned DEFAULT 0, `transaction_category_id` int NOT NULL, PRIMARY KEY  (`id`), KEY `fk_ss_purchase_orders1_idx` (`purchase_order_no`), KEY `fk_ss_sale_orders1_idx` (`sale_order_no`), KEY `fk_ss_products1_idx` (`product_id`), KEY `fk_ss_sstcat1_idx` (`transaction_category_id`))ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

#create relations
db.rel.products = ALTER TABLE `products` ADD CONSTRAINT `fk_products_categories1` FOREIGN KEY (`category_id`) REFERENCES `product_categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_products_types1` FOREIGN KEY (`type_id`) REFERENCES `product_types` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_products_uoms1` FOREIGN KEY (`standard_uom_id`) REFERENCES `uoms` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_products_uoms2` FOREIGN KEY (`sale_uom_id`) REFERENCES `uoms` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_products_uoms3` FOREIGN KEY (`purchase_uom_id`) REFERENCES `uoms` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
db.rel.users_groups = ALTER TABLE `users_groups` ADD CONSTRAINT `fk_users_groups_users1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_users_groups_groups1` FOREIGN KEY (`group_id`) REFERENCES `groups` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
db.rel.users_addressess = ALTER TABLE `users_addressess` ADD CONSTRAINT `fk_users_addressess_users1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_users_addressess_address_types1` FOREIGN KEY (`address_type_id`) REFERENCES `address_types` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_users_addressess_address_categories1` FOREIGN KEY (`address_category_id`) REFERENCES `address_categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
db.rel.suppliers = ALTER TABLE `suppliers` ADD CONSTRAINT `fk_suppliers_users1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
db.rel.customers = ALTER TABLE `customers` ADD CONSTRAINT `fk_customers_users1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
db.rel.purchase_orders = ALTER TABLE `purchase_orders` ADD CONSTRAINT `fk_po_pos1` FOREIGN KEY (`status_id`) REFERENCES `purchase_order_statuses` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_po_users1` FOREIGN KEY (`supplier_user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
db.rel.po_warehouse_products = ALTER TABLE `po_warehouse_products` ADD CONSTRAINT `fk_powp_purchase_orders1` FOREIGN KEY (`order_no`) REFERENCES `purchase_orders` (`order_no`) ON DELETE CASCADE ON UPDATE CASCADE;
db.rel.warehouse_stocks = ALTER TABLE `warehouse_stocks` ADD CONSTRAINT `fk_wsi_purchase_orders1` FOREIGN KEY (`order_no`) REFERENCES `purchase_orders` (`order_no`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_wsi_products1` FOREIGN KEY (`product_id`) REFERENCES `products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_wsi_wstcat1` FOREIGN KEY (`transaction_category_id`) REFERENCES `ws_transaction_categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
db.rel.po_showroom_products = ALTER TABLE `po_showroom_products` ADD CONSTRAINT `fk_po_showroom_products_purchase_orders1` FOREIGN KEY (`order_no`) REFERENCES `purchase_orders` (`order_no`) ON DELETE CASCADE ON UPDATE CASCADE; 
db.rel.sale_orders = ALTER TABLE `sale_orders` ADD CONSTRAINT `fk_so_sos1` FOREIGN KEY (`status_id`) REFERENCES `sale_order_statuses` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_so_users1` FOREIGN KEY (`customer_user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
db.rel.sale_order_products = ALTER TABLE `sale_order_products` ADD CONSTRAINT `fk_sop_sale_orders1` FOREIGN KEY (`sale_order_no`) REFERENCES `sale_orders` (`order_no`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_sop_purchase_orders1` FOREIGN KEY (`purchase_order_no`) REFERENCES `purchase_orders` (`order_no`) ON DELETE CASCADE ON UPDATE CASCADE;
db.rel.showroom_stocks = ALTER TABLE `showroom_stocks` ADD CONSTRAINT `fk_ss_purchase_orders1` FOREIGN KEY (`purchase_order_no`) REFERENCES `purchase_orders` (`order_no`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_ss_sale_orders1` FOREIGN KEY (`sale_order_no`) REFERENCES `sale_orders` (`order_no`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_ss_product_info1` FOREIGN KEY (`product_id`) REFERENCES `products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, ADD CONSTRAINT `fk_ss_sstcat1` FOREIGN KEY (`transaction_category_id`) REFERENCES `ss_transaction_categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;


#insert default data
db.defaultData.product_categories = INSERT INTO `product_categories` (`id`, `title`) VALUES (1, 'Product category1'), (2, 'Product category2');
db.defaultData.product_types = INSERT INTO `product_types` (`id`, `title`) VALUES (1, 'Product type1'), (2, 'Product type2');
db.defaultData.uoms = INSERT INTO `uoms` (`id`, `title`) VALUES (1, 'UOM1'), (2, 'UOM2');
db.defaultData.groups = INSERT INTO `groups` (`id`, `name`, `description`) VALUES (1, 'supplier', 'Supplier'), (2, 'customer', 'Customer');
db.defaultData.users = INSERT INTO `users` (`id`, `first_name`, `last_name`, `email`, `phone`, `fax`, `website`, `created_on`, `modified_on`) VALUES (1, 'Supplier', '1', 'supplier1@gmail.com', '01711123456', '01678123456', 'www.supplier1.com', 12345, 12345), (2, 'Customer', '1', 'customer@gmail.com', '01711123456', '01678123456', 'www.customer1.com', 12345, 12345);
db.defaultData.users_groups = INSERT INTO `users_groups` (`id`, `user_id`, `group_id`) VALUES (1, 1, 1), (2, 2, 2);
db.defaultData.address_types = INSERT INTO `address_types` (`id`, `title`) VALUES (1, 'Commercial'), (2, 'Residential');
db.defaultData.address_categories = INSERT INTO `address_categories` (`id`, `title`) VALUES (1, 'Business'), (2, 'Shipping');
db.defaultData.purchase_order_statuses = INSERT INTO `purchase_order_statuses` (`id`, `description`) VALUES (1, 'Open'), (2, 'In Progress'), (3, 'Fully Received'), (4, 'Paid'), (5, 'Cancelled');
db.defaultData.ws_transaction_categories = INSERT INTO `ws_transaction_categories` (`id`, `description`) VALUES (1, 'Purchase In'), (2, 'Purchase Partial In'), (3, 'Purchase partial Out'), (4, 'Purchase Delete'); 
db.defaultData.sale_order_statuses = INSERT INTO `sale_order_statuses` (`id`, `description`) VALUES (1, 'Quote'), (2, 'Open'), (3, 'In Progress'), (4, 'Fully Shipped'), (5, 'Invoiced'), (6, 'Paid'), (7, 'Cancelled');
db.defaultData.ss_transaction_categories = INSERT INTO `ss_transaction_categories` (`id`, `description`) VALUES (1, 'Purchase In'), (2, 'Purchase Partial In'), (3, 'Purchase partial Out'), (4, 'Purchase Delete'), (5, 'Sale In'), (6, 'Sale partial Out'), (7, 'Sale Delete'); 